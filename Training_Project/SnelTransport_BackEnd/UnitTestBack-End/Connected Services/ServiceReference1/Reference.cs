//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UnitTestBack_End.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetCustomer", ReplyAction="http://tempuri.org/IService/GetCustomerResponse")]
        Service_Database_Connection.Customer[] GetCustomer();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetCustomer", ReplyAction="http://tempuri.org/IService/GetCustomerResponse")]
        System.Threading.Tasks.Task<Service_Database_Connection.Customer[]> GetCustomerAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertCustomer", ReplyAction="http://tempuri.org/IService/InsertCustomerResponse")]
        void InsertCustomer(Service_Database_Connection.Customer customer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertCustomer", ReplyAction="http://tempuri.org/IService/InsertCustomerResponse")]
        System.Threading.Tasks.Task InsertCustomerAsync(Service_Database_Connection.Customer customer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateCustomer", ReplyAction="http://tempuri.org/IService/UpdateCustomerResponse")]
        void UpdateCustomer(Service_Database_Connection.Customer customer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateCustomer", ReplyAction="http://tempuri.org/IService/UpdateCustomerResponse")]
        System.Threading.Tasks.Task UpdateCustomerAsync(Service_Database_Connection.Customer customer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteCustomer", ReplyAction="http://tempuri.org/IService/DeleteCustomerResponse")]
        void DeleteCustomer(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteCustomer", ReplyAction="http://tempuri.org/IService/DeleteCustomerResponse")]
        System.Threading.Tasks.Task DeleteCustomerAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertDistanceInfo", ReplyAction="http://tempuri.org/IService/InsertDistanceInfoResponse")]
        void InsertDistanceInfo(Service_Database_Connection.Distance_Table[] distance_info);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertDistanceInfo", ReplyAction="http://tempuri.org/IService/InsertDistanceInfoResponse")]
        System.Threading.Tasks.Task InsertDistanceInfoAsync(Service_Database_Connection.Distance_Table[] distance_info);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetOptimalRoute", ReplyAction="http://tempuri.org/IService/GetOptimalRouteResponse")]
        Service_Database_Connection.Distance_Table[] GetOptimalRoute();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetOptimalRoute", ReplyAction="http://tempuri.org/IService/GetOptimalRouteResponse")]
        System.Threading.Tasks.Task<Service_Database_Connection.Distance_Table[]> GetOptimalRouteAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertOptimalRoute_Config", ReplyAction="http://tempuri.org/IService/InsertOptimalRoute_ConfigResponse")]
        void InsertOptimalRoute_Config(Service_Database_Connection.ConfigOptimalRoute configData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertOptimalRoute_Config", ReplyAction="http://tempuri.org/IService/InsertOptimalRoute_ConfigResponse")]
        System.Threading.Tasks.Task InsertOptimalRoute_ConfigAsync(Service_Database_Connection.ConfigOptimalRoute configData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetOptimalRoute_Config", ReplyAction="http://tempuri.org/IService/GetOptimalRoute_ConfigResponse")]
        Service_Database_Connection.ConfigOptimalRoute[] GetOptimalRoute_Config();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetOptimalRoute_Config", ReplyAction="http://tempuri.org/IService/GetOptimalRoute_ConfigResponse")]
        System.Threading.Tasks.Task<Service_Database_Connection.ConfigOptimalRoute[]> GetOptimalRoute_ConfigAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetArticle", ReplyAction="http://tempuri.org/IService/GetArticleResponse")]
        Service_Database_Connection.Article[] GetArticle();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetArticle", ReplyAction="http://tempuri.org/IService/GetArticleResponse")]
        System.Threading.Tasks.Task<Service_Database_Connection.Article[]> GetArticleAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertArticle", ReplyAction="http://tempuri.org/IService/InsertArticleResponse")]
        void InsertArticle(Service_Database_Connection.Article article);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertArticle", ReplyAction="http://tempuri.org/IService/InsertArticleResponse")]
        System.Threading.Tasks.Task InsertArticleAsync(Service_Database_Connection.Article article);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateArticle", ReplyAction="http://tempuri.org/IService/UpdateArticleResponse")]
        void UpdateArticle(Service_Database_Connection.Article article);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateArticle", ReplyAction="http://tempuri.org/IService/UpdateArticleResponse")]
        System.Threading.Tasks.Task UpdateArticleAsync(Service_Database_Connection.Article article);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteArticle", ReplyAction="http://tempuri.org/IService/DeleteArticleResponse")]
        void DeleteArticle(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteArticle", ReplyAction="http://tempuri.org/IService/DeleteArticleResponse")]
        System.Threading.Tasks.Task DeleteArticleAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetOrders", ReplyAction="http://tempuri.org/IService/GetOrdersResponse")]
        Service_Database_Connection.Orders[] GetOrders();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetOrders", ReplyAction="http://tempuri.org/IService/GetOrdersResponse")]
        System.Threading.Tasks.Task<Service_Database_Connection.Orders[]> GetOrdersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertOrder", ReplyAction="http://tempuri.org/IService/InsertOrderResponse")]
        void InsertOrder(Service_Database_Connection.Orders order);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertOrder", ReplyAction="http://tempuri.org/IService/InsertOrderResponse")]
        System.Threading.Tasks.Task InsertOrderAsync(Service_Database_Connection.Orders order);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateOrder", ReplyAction="http://tempuri.org/IService/UpdateOrderResponse")]
        void UpdateOrder(Service_Database_Connection.Orders order);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateOrder", ReplyAction="http://tempuri.org/IService/UpdateOrderResponse")]
        System.Threading.Tasks.Task UpdateOrderAsync(Service_Database_Connection.Orders order);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteOrder", ReplyAction="http://tempuri.org/IService/DeleteOrderResponse")]
        void DeleteOrder(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteOrder", ReplyAction="http://tempuri.org/IService/DeleteOrderResponse")]
        System.Threading.Tasks.Task DeleteOrderAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetOrders_Detail", ReplyAction="http://tempuri.org/IService/GetOrders_DetailResponse")]
        Service_Database_Connection.Order_Detail[] GetOrders_Detail();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetOrders_Detail", ReplyAction="http://tempuri.org/IService/GetOrders_DetailResponse")]
        System.Threading.Tasks.Task<Service_Database_Connection.Order_Detail[]> GetOrders_DetailAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertOrder_Detail", ReplyAction="http://tempuri.org/IService/InsertOrder_DetailResponse")]
        void InsertOrder_Detail(Service_Database_Connection.Order_Detail order_detail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertOrder_Detail", ReplyAction="http://tempuri.org/IService/InsertOrder_DetailResponse")]
        System.Threading.Tasks.Task InsertOrder_DetailAsync(Service_Database_Connection.Order_Detail order_detail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateOrder_Detail", ReplyAction="http://tempuri.org/IService/UpdateOrder_DetailResponse")]
        void UpdateOrder_Detail(Service_Database_Connection.Order_Detail order_detail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateOrder_Detail", ReplyAction="http://tempuri.org/IService/UpdateOrder_DetailResponse")]
        System.Threading.Tasks.Task UpdateOrder_DetailAsync(Service_Database_Connection.Order_Detail order_detail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteOrder_Detail", ReplyAction="http://tempuri.org/IService/DeleteOrder_DetailResponse")]
        void DeleteOrder_Detail(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteOrder_Detail", ReplyAction="http://tempuri.org/IService/DeleteOrder_DetailResponse")]
        System.Threading.Tasks.Task DeleteOrder_DetailAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : UnitTestBack_End.ServiceReference1.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<UnitTestBack_End.ServiceReference1.IService>, UnitTestBack_End.ServiceReference1.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Service_Database_Connection.Customer[] GetCustomer() {
            return base.Channel.GetCustomer();
        }
        
        public System.Threading.Tasks.Task<Service_Database_Connection.Customer[]> GetCustomerAsync() {
            return base.Channel.GetCustomerAsync();
        }
        
        public void InsertCustomer(Service_Database_Connection.Customer customer) {
            base.Channel.InsertCustomer(customer);
        }
        
        public System.Threading.Tasks.Task InsertCustomerAsync(Service_Database_Connection.Customer customer) {
            return base.Channel.InsertCustomerAsync(customer);
        }
        
        public void UpdateCustomer(Service_Database_Connection.Customer customer) {
            base.Channel.UpdateCustomer(customer);
        }
        
        public System.Threading.Tasks.Task UpdateCustomerAsync(Service_Database_Connection.Customer customer) {
            return base.Channel.UpdateCustomerAsync(customer);
        }
        
        public void DeleteCustomer(string id) {
            base.Channel.DeleteCustomer(id);
        }
        
        public System.Threading.Tasks.Task DeleteCustomerAsync(string id) {
            return base.Channel.DeleteCustomerAsync(id);
        }
        
        public void InsertDistanceInfo(Service_Database_Connection.Distance_Table[] distance_info) {
            base.Channel.InsertDistanceInfo(distance_info);
        }
        
        public System.Threading.Tasks.Task InsertDistanceInfoAsync(Service_Database_Connection.Distance_Table[] distance_info) {
            return base.Channel.InsertDistanceInfoAsync(distance_info);
        }
        
        public Service_Database_Connection.Distance_Table[] GetOptimalRoute() {
            return base.Channel.GetOptimalRoute();
        }
        
        public System.Threading.Tasks.Task<Service_Database_Connection.Distance_Table[]> GetOptimalRouteAsync() {
            return base.Channel.GetOptimalRouteAsync();
        }
        
        public void InsertOptimalRoute_Config(Service_Database_Connection.ConfigOptimalRoute configData) {
            base.Channel.InsertOptimalRoute_Config(configData);
        }
        
        public System.Threading.Tasks.Task InsertOptimalRoute_ConfigAsync(Service_Database_Connection.ConfigOptimalRoute configData) {
            return base.Channel.InsertOptimalRoute_ConfigAsync(configData);
        }
        
        public Service_Database_Connection.ConfigOptimalRoute[] GetOptimalRoute_Config() {
            return base.Channel.GetOptimalRoute_Config();
        }
        
        public System.Threading.Tasks.Task<Service_Database_Connection.ConfigOptimalRoute[]> GetOptimalRoute_ConfigAsync() {
            return base.Channel.GetOptimalRoute_ConfigAsync();
        }
        
        public Service_Database_Connection.Article[] GetArticle() {
            return base.Channel.GetArticle();
        }
        
        public System.Threading.Tasks.Task<Service_Database_Connection.Article[]> GetArticleAsync() {
            return base.Channel.GetArticleAsync();
        }
        
        public void InsertArticle(Service_Database_Connection.Article article) {
            base.Channel.InsertArticle(article);
        }
        
        public System.Threading.Tasks.Task InsertArticleAsync(Service_Database_Connection.Article article) {
            return base.Channel.InsertArticleAsync(article);
        }
        
        public void UpdateArticle(Service_Database_Connection.Article article) {
            base.Channel.UpdateArticle(article);
        }
        
        public System.Threading.Tasks.Task UpdateArticleAsync(Service_Database_Connection.Article article) {
            return base.Channel.UpdateArticleAsync(article);
        }
        
        public void DeleteArticle(int id) {
            base.Channel.DeleteArticle(id);
        }
        
        public System.Threading.Tasks.Task DeleteArticleAsync(int id) {
            return base.Channel.DeleteArticleAsync(id);
        }
        
        public Service_Database_Connection.Orders[] GetOrders() {
            return base.Channel.GetOrders();
        }
        
        public System.Threading.Tasks.Task<Service_Database_Connection.Orders[]> GetOrdersAsync() {
            return base.Channel.GetOrdersAsync();
        }
        
        public void InsertOrder(Service_Database_Connection.Orders order) {
            base.Channel.InsertOrder(order);
        }
        
        public System.Threading.Tasks.Task InsertOrderAsync(Service_Database_Connection.Orders order) {
            return base.Channel.InsertOrderAsync(order);
        }
        
        public void UpdateOrder(Service_Database_Connection.Orders order) {
            base.Channel.UpdateOrder(order);
        }
        
        public System.Threading.Tasks.Task UpdateOrderAsync(Service_Database_Connection.Orders order) {
            return base.Channel.UpdateOrderAsync(order);
        }
        
        public void DeleteOrder(int id) {
            base.Channel.DeleteOrder(id);
        }
        
        public System.Threading.Tasks.Task DeleteOrderAsync(int id) {
            return base.Channel.DeleteOrderAsync(id);
        }
        
        public Service_Database_Connection.Order_Detail[] GetOrders_Detail() {
            return base.Channel.GetOrders_Detail();
        }
        
        public System.Threading.Tasks.Task<Service_Database_Connection.Order_Detail[]> GetOrders_DetailAsync() {
            return base.Channel.GetOrders_DetailAsync();
        }
        
        public void InsertOrder_Detail(Service_Database_Connection.Order_Detail order_detail) {
            base.Channel.InsertOrder_Detail(order_detail);
        }
        
        public System.Threading.Tasks.Task InsertOrder_DetailAsync(Service_Database_Connection.Order_Detail order_detail) {
            return base.Channel.InsertOrder_DetailAsync(order_detail);
        }
        
        public void UpdateOrder_Detail(Service_Database_Connection.Order_Detail order_detail) {
            base.Channel.UpdateOrder_Detail(order_detail);
        }
        
        public System.Threading.Tasks.Task UpdateOrder_DetailAsync(Service_Database_Connection.Order_Detail order_detail) {
            return base.Channel.UpdateOrder_DetailAsync(order_detail);
        }
        
        public void DeleteOrder_Detail(int id) {
            base.Channel.DeleteOrder_Detail(id);
        }
        
        public System.Threading.Tasks.Task DeleteOrder_DetailAsync(int id) {
            return base.Channel.DeleteOrder_DetailAsync(id);
        }
    }
}
